version: '3'

vars:
  GO_VERSION: 1.24
  BUILD_DIR: ./build
  MODULES:
    - "."
    - "./cmd/controller"
    - "./cmd/api"
    - "./cmd/fortuna"

tasks:
  default:
    desc: Display available tasks
    cmds:
      - task --list-all

  init:
    desc: Initialize the project
    cmds:
      - mkdir -p cmd/controller cmd/api cmd/fortuna pkg/api/docs
      - |
        if [ ! -f go.mod ]; then
          go mod init github.com/lokey/rng-service
          echo "Created go.mod file"
        fi

  install-deps:
    desc: Install required dependencies
    cmds:
      - go get github.com/gin-gonic/gin
      - go get github.com/go-playground/validator/v10
      - go get github.com/swaggo/files
      - go get github.com/swaggo/gin-swagger
      - go get github.com/d2r2/go-i2c

  tidy:
    desc: Tidy all Go modules
    deps: [install-deps]
    cmds:
      - for: { var: MODULES }
        dir: "{{.}}"
        cmd: go mod tidy
        ignore_error: true

  tidy-force:
    desc: Force tidy all Go modules by deleting go.sum files first
    deps: [install-deps]
    cmds:
      - for: { var: MODULES }
        dir: "{{.}}"
        cmd: rm -f go.sum && go mod tidy
        ignore_error: true

  download:
    desc: Download Go dependencies for all modules
    deps: [tidy]
    cmds:
      - for: { var: MODULES }
        dir: "{{.}}"
        cmd: go mod download
        ignore_error: true

  lint:
    desc: Run linters on all modules
    deps: [install-golangci-lint, download]
    cmds:
      - |
        find . -name "*.go" -not -path "./vendor/*" -not -path "./build/*" | grep -q "\.go$" || {
          echo "No Go files found. Skipping lint."
          exit 0
        }
      - for: { var: MODULES }
        dir: "{{.}}"
        cmd: golangci-lint run ./... || echo "Linting found issues, but continuing"
        ignore_error: true

  fmt:
    desc: Format all Go code
    cmds:
      - |
        find . -name "*.go" -not -path "./vendor/*" -not -path "./build/*" | grep -q "\.go$" || {
          echo "No Go files found. Skipping format."
          exit 0
        }
      - find . -name "*.go" -not -path "./vendor/*" -not -path "./build/*" | xargs gofmt -s -w

  vet:
    desc: Vet all modules
    deps: [download]
    cmds:
      - |
        find . -name "*.go" -not -path "./vendor/*" -not -path "./build/*" | grep -q "\.go$" || {
          echo "No Go files found. Skipping vet."
          exit 0
        }
      - for: { var: MODULES }
        dir: "{{.}}"
        cmd: go vet ./... || echo "Vet found issues, but continuing"
        ignore_error: true

  build:
    desc: Build all components
    deps: [download]
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - |
        if [ -d cmd/controller ] && [ -f cmd/controller/main.go ]; then
          cd cmd/controller && go build -o {{.BUILD_DIR}}/controller || echo "Controller build failed"
        else
          echo "Skipping controller build - directory or main.go not found"
        fi
      - |
        if [ -d cmd/api ] && [ -f cmd/api/main.go ]; then
          cd cmd/api && go build -o {{.BUILD_DIR}}/api || echo "API build failed"
        else
          echo "Skipping API build - directory or main.go not found"
        fi
      - |
        if [ -d cmd/fortuna ] && [ -f cmd/fortuna/main.go ]; then
          cd cmd/fortuna && go build -o {{.BUILD_DIR}}/fortuna || echo "Fortuna build failed"
        else
          echo "Skipping Fortuna build - directory or main.go not found"
        fi

  test:
    desc: Run tests
    deps: [download]
    cmds:
      - |
        find . -name "*_test.go" -not -path "./vendor/*" -not -path "./build/*" | grep -q "_test\.go$" || {
          echo "No test files found. Skipping tests."
          exit 0
        }
      - for: { var: MODULES }
        dir: "{{.}}"
        cmd: go test -v ./... || echo "Tests failed, but continuing"
        ignore_error: true

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -rf {{.BUILD_DIR}}

  install-golangci-lint:
    desc: Install golangci-lint
    cmds:
      - |
        if ! command -v golangci-lint &> /dev/null; then
          echo "Installing golangci-lint..."
          go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        fi
    silent: true

  prepare-all:
    desc: Run all preparation tasks
    cmds:
      - task: tidy
      - task: download
      - task: fmt
      - task: vet
      - task: lint

  all:
    desc: Run all development tasks in sequence
    cmds:
      - echo "=== Starting all tasks ==="
      - task: init
      - task: install-deps
      - task: clean
      - task: tidy
      - task: download
      - task: fmt
      - task: vet
      - task: lint
      - task: test
      - task: build
      - echo "=== All tasks completed ==="

  build_controller:
    cmds:
      - >
        docker buildx build --platform linux/arm64/v8
        -t lokey-registry:5000/lokey-controller:latest
        -f cmd/controller/Dockerfile
        --push
        --allow security.insecure
        --allow network.host
        .

  build_api:
    cmds:
      - >
        docker buildx build --platform linux/arm64/v8
        -t lokey-registry:5000/lokey-api:latest
        -f cmd/api/Dockerfile
        --push
        --allow security.insecure
        --allow network.host
        .

  build_fortuna:
    cmds:
      - >
        docker buildx build --platform linux/arm64/v8
        -t lokey-registry:5000/lokey-fortuna:latest
        -f cmd/fortuna/Dockerfile
        --push
        --allow security.insecure
        --allow network.host
        .

  _build_all_containers:
    desc: Build all containers in parallel
    deps:
      - build_controller
      - build_api
      - build_fortuna
    run: once

  build_images_and_registry:
    cmds:
      - docker network create lokey-net || true
      - docker rm -f registry || true
      - docker run -d --name registry --network lokey-net --network-alias lokey-registry -p 5000:5000 registry:2
      - docker buildx rm pi-builder || true
      - docker buildx create --config buildx.toml --name pi-builder --use --driver docker-container --buildkitd-flags '--allow-insecure-entitlement network.host --allow-insecure-entitlement security.insecure' --driver-opt network=lokey-net
      - docker buildx inspect --bootstrap
      - task: _build_all_containers