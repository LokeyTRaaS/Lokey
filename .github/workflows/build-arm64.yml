name: Build ARM64 Binaries and Containers

on:
  push:
    branches:
      - main
      - refactor/clean_up
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  GO_VERSION: '1.24'

jobs:
  # Build native ARM64 binaries in parallel
  build-binaries:
    name: Build ${{ matrix.service }} Binary
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [controller, api, fortuna]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            cmd/${{ matrix.service }}/go.sum

      - name: Install ARM64 cross-compilation tools
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y gcc-aarch64-linux-gnu

      # Install Swag for API service only
      - name: Install Swag for API service
        if: matrix.service == 'api'
        run: go install github.com/swaggo/swag/cmd/swag@latest

      # Generate Swagger docs for API service
      - name: Generate Swagger documentation
        if: matrix.service == 'api'
        run: |
          echo "=== Generating Swagger documentation ==="
          swag init --parseDependency --parseInternal \
            --generalInfo main.go \
            --dir ./cmd/api/,./pkg/api \
            --output ./pkg/api/docs
          
          echo ""
          echo "=== Generated Swagger files ==="
          ls -lah ./pkg/api/docs/
          
          echo ""
          echo "=== Swagger.json preview ==="
          head -n 20 ./pkg/api/docs/swagger.json

      - name: Download dependencies
        run: |
          go mod download
          cd cmd/${{ matrix.service }} && go mod download

      - name: Build ARM64 binary
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: arm64
          CC: aarch64-linux-gnu-gcc
        run: |
          mkdir -p build
          cd cmd/${{ matrix.service }}
          go build -v -trimpath -ldflags="-s -w" -o ../../build/lokey-${{ matrix.service }}-arm64

      - name: Verify binary
        run: |
          echo "=== Binary verification ==="
          file build/lokey-${{ matrix.service }}-arm64
          ls -lh build/lokey-${{ matrix.service }}-arm64

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: lokey-${{ matrix.service }}-arm64
          path: build/lokey-${{ matrix.service }}-arm64
          retention-days: 30
          compression-level: 9

      # Upload Swagger docs as artifact (API service only)
      - name: Upload Swagger documentation
        if: matrix.service == 'api'
        uses: actions/upload-artifact@v4
        with:
          name: swagger-docs
          path: pkg/api/docs/
          retention-days: 30
          compression-level: 6

  # Build Docker images using pre-built binaries
  build-containers:
    name: Build ${{ matrix.service }} Container
    runs-on: ubuntu-latest
    needs: build-binaries
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        service: [controller, api, fortuna]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create build directory
        run: mkdir -p build

      - name: Download binary artifact
        uses: actions/download-artifact@v4
        with:
          name: lokey-${{ matrix.service }}-arm64
          path: ./build

      # Download Swagger docs for API service
      - name: Download Swagger documentation
        if: matrix.service == 'api'
        uses: actions/download-artifact@v4
        with:
          name: swagger-docs
          path: ./pkg/api/docs

      - name: Verify artifacts and fix .dockerignore
        run: |
          echo "=== Binary verification ==="
          ls -la ./build/
          file ./build/lokey-${{ matrix.service }}-arm64
          chmod +x ./build/lokey-${{ matrix.service }}-arm64
          
          # Verify Swagger docs for API service
          if [ "${{ matrix.service }}" == "api" ]; then
            echo ""
            echo "=== Swagger documentation verification ==="
            ls -la ./pkg/api/docs/
            if [ -f "./pkg/api/docs/swagger.json" ]; then
              echo "‚úì swagger.json found ($(ls -lh ./pkg/api/docs/swagger.json | awk '{print $5}'))"
            fi
            if [ -f "./pkg/api/docs/swagger.yaml" ]; then
              echo "‚úì swagger.yaml found ($(ls -lh ./pkg/api/docs/swagger.yaml | awk '{print $5}'))"
            fi
          fi
          
          echo ""
          echo "=== Fixing .dockerignore to allow build/ directory ==="
          if [ -f .dockerignore ]; then
            echo "Original .dockerignore:"
            cat .dockerignore
            # Temporarily remove lines that exclude build directory
            grep -v '^build' .dockerignore > .dockerignore.tmp || true
            mv .dockerignore.tmp .dockerignore
            echo ""
            echo "Modified .dockerignore:"
            cat .dockerignore
          else
            echo "No .dockerignore found"
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/lokey-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cmd/${{ matrix.service }}/Dockerfile.action
          platforms: linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

  # Create release with all artifacts
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-containers]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create checksums
        run: |
          cd artifacts
          
          # Create checksums for binaries
          for dir in lokey-*-arm64; do
            if [ -d "$dir" ]; then
              cd "$dir"
              sha256sum * > checksums.txt
              cd ..
            fi
          done
          
          # Create combined checksum file for all binaries
          find . -name "lokey-*-arm64" -type f -exec sha256sum {} \; > ../all-checksums.txt
          
          # Create checksum for swagger docs
          if [ -d "swagger-docs" ]; then
            cd swagger-docs
            sha256sum * > ../swagger-checksums.txt
            cd ..
          fi

      - name: Create release archives
        run: |
          mkdir -p releases
          cd artifacts
          
          # Create individual service archives
          for service in controller api fortuna; do
            if [ -d "lokey-${service}-arm64" ]; then
              tar -czf ../releases/lokey-${service}-arm64.tar.gz \
                -C lokey-${service}-arm64 .
            fi
          done
          
          # Create combined archive with all binaries
          mkdir -p combined
          find . -name "lokey-*-arm64" -type f -exec cp {} combined/ \;
          tar -czf ../releases/lokey-all-services-arm64.tar.gz -C combined .
          
          # Create swagger docs archive
          if [ -d "swagger-docs" ]; then
            tar -czf ../releases/swagger-docs.tar.gz -C swagger-docs .
          fi

      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          cat << EOF > release_notes.md
          ## üöÄ LoKey $VERSION - ARM64 Release

          ### üì¶ What's Included
          - Controller service binary (ATECC608A hardware interface)
          - API service binary (Main REST API with BoltDB)
          - Fortuna service binary (Cryptographic RNG amplifier)
          - OpenAPI/Swagger documentation
          - Docker images for all services

          ### üê≥ Docker Images
          Pull the images with:
          \`\`\`bash
          docker pull ghcr.io/${{ github.repository_owner }}/lokey-controller:$VERSION
          docker pull ghcr.io/${{ github.repository_owner }}/lokey-api:$VERSION
          docker pull ghcr.io/${{ github.repository_owner }}/lokey-fortuna:$VERSION
          \`\`\`

          ### üì• Download Binaries

          **All services in one archive:**
          \`\`\`bash
          wget https://github.com/${{ github.repository }}/releases/download/$VERSION/lokey-all-services-arm64.tar.gz
          tar -xzf lokey-all-services-arm64.tar.gz
          chmod +x lokey-*-arm64
          \`\`\`

          **Individual services:**
          \`\`\`bash
          # Controller only
          wget https://github.com/${{ github.repository }}/releases/download/$VERSION/lokey-controller-arm64.tar.gz
          
          # API only
          wget https://github.com/${{ github.repository }}/releases/download/$VERSION/lokey-api-arm64.tar.gz
          
          # Fortuna only
          wget https://github.com/${{ github.repository }}/releases/download/$VERSION/lokey-fortuna-arm64.tar.gz
          \`\`\`

          ### üìö API Documentation

          **Download OpenAPI/Swagger specification:**
          \`\`\`bash
          wget https://github.com/${{ github.repository }}/releases/download/$VERSION/swagger-docs.tar.gz
          tar -xzf swagger-docs.tar.gz
          \`\`\`

          The archive contains:
          - \`swagger.json\` - OpenAPI 3.0 specification (JSON format)
          - \`swagger.yaml\` - OpenAPI 3.0 specification (YAML format)
          - \`docs.go\` - Generated Go documentation

          **View live documentation:**
          Once the API service is running, access Swagger UI at:
          \`\`\`
          http://your-api-host:8080/swagger/index.html
          \`\`\`

          ### ü•ß Raspberry Pi Quick Start
          \`\`\`bash
          # Download controller binary
          wget https://github.com/${{ github.repository }}/releases/download/$VERSION/lokey-controller-arm64.tar.gz
          tar -xzf lokey-controller-arm64.tar.gz
          chmod +x lokey-controller-arm64
          
          # Run (requires I2C permissions)
          sudo ./lokey-controller-arm64
          \`\`\`

          ### üîê Verify Downloads
          \`\`\`bash
          # Download checksums
          wget https://github.com/${{ github.repository }}/releases/download/$VERSION/all-checksums.txt
          wget https://github.com/${{ github.repository }}/releases/download/$VERSION/swagger-checksums.txt
          
          # Verify
          sha256sum -c all-checksums.txt
          sha256sum -c swagger-checksums.txt
          \`\`\`

          ### üìñ Documentation
          - [Hardware Setup](https://github.com/${{ github.repository }}/blob/main/device/HowToSetup.md)
          - [API Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [Docker Compose Setup](https://github.com/${{ github.repository }}/blob/main/docker-compose.yaml)

          ### üîß System Requirements
          - **OS**: Linux ARM64 (Raspberry Pi OS, Ubuntu, etc.)
          - **Hardware**: Raspberry Pi Zero 2W or newer
          - **Optional**: ATECC608A chip for hardware TRNG

          ---
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/...
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            releases/*.tar.gz
            all-checksums.txt
            swagger-checksums.txt
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary job for status checks
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-binaries, build-containers]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate comprehensive summary
        run: |
          echo "# üöÄ Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üìä Build Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Binary Build | Container Build | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------------|-----------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          BINARY_STATUS="${{ needs.build-binaries.result }}"
          CONTAINER_STATUS="${{ needs.build-containers.result }}"
          
          if [ "$BINARY_STATUS" == "success" ] && [ "$CONTAINER_STATUS" == "success" ]; then
            OVERALL="‚úÖ All Passed"
          else
            OVERALL="‚ùå Failed"
          fi
          
          # Individual service status (check artifact existence)
          for service in controller api fortuna; do
            if [ -f "./artifacts/lokey-${service}-arm64/lokey-${service}-arm64" ]; then
              BINARY_ICON="‚úÖ"
            else
              BINARY_ICON="‚ùå"
            fi
          
            if [ "$CONTAINER_STATUS" == "success" ]; then
              CONTAINER_ICON="‚úÖ"
            else
              CONTAINER_ICON="‚ùå"
            fi
          
            echo "| lokey-${service} | ${BINARY_ICON} | ${CONTAINER_ICON} | ${OVERALL} |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üì¶ Binary Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Download the compiled ARM64 binaries from the artifacts section below." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | Binary Name | Size | SHA256 |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------------|------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # List all binaries with details
          for service in controller api fortuna; do
            ARTIFACT_PATH="./artifacts/lokey-${service}-arm64/lokey-${service}-arm64"
            if [ -f "$ARTIFACT_PATH" ]; then
              SIZE=$(ls -lh "$ARTIFACT_PATH" | awk '{print $5}')
              SHA256=$(sha256sum "$ARTIFACT_PATH" | awk '{print substr($1,1,16)"..."}')
              echo "| lokey-${service} | \`lokey-${service}-arm64\` | $SIZE | \`$SHA256\` |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| lokey-${service} | \`lokey-${service}-arm64\` | N/A | N/A |" >> $GITHUB_STEP_SUMMARY
            fi
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "> üí° **Tip**: Binaries are available in the **Artifacts** section of this workflow run for 30 days." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add Swagger/OpenAPI documentation section
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## üìö API Documentation (OpenAPI/Swagger)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "./artifacts/swagger-docs" ]; then
            echo "‚úÖ OpenAPI specification and Swagger UI files are available for download." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| File | Description | Size |" >> $GITHUB_STEP_SUMMARY
            echo "|------|-------------|------|" >> $GITHUB_STEP_SUMMARY
          
            if [ -f "./artifacts/swagger-docs/swagger.json" ]; then
              SWAGGER_JSON_SIZE=$(ls -lh "./artifacts/swagger-docs/swagger.json" | awk '{print $5}')
              SWAGGER_JSON_SHA=$(sha256sum "./artifacts/swagger-docs/swagger.json" | awk '{print substr($1,1,12)"..."}')
              echo "| \`swagger.json\` | OpenAPI 3.0 specification (JSON) | $SWAGGER_JSON_SIZE |" >> $GITHUB_STEP_SUMMARY
            fi
          
            if [ -f "./artifacts/swagger-docs/swagger.yaml" ]; then
              SWAGGER_YAML_SIZE=$(ls -lh "./artifacts/swagger-docs/swagger.yaml" | awk '{print $5}')
              echo "| \`swagger.yaml\` | OpenAPI 3.0 specification (YAML) | $SWAGGER_YAML_SIZE |" >> $GITHUB_STEP_SUMMARY
            fi
          
            if [ -f "./artifacts/swagger-docs/docs.go" ]; then
              DOCS_GO_SIZE=$(ls -lh "./artifacts/swagger-docs/docs.go" | awk '{print $5}')
              echo "| \`docs.go\` | Generated Go documentation | $DOCS_GO_SIZE |" >> $GITHUB_STEP_SUMMARY
            fi
          
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìñ Using the API Documentation" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**View in Swagger UI (when API is running):**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "http://your-api-host:8080/swagger/index.html" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Import into Postman/Insomnia:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Download \`swagger-docs\` artifact from below" >> $GITHUB_STEP_SUMMARY
            echo "2. Extract and import \`swagger.json\` or \`swagger.yaml\`" >> $GITHUB_STEP_SUMMARY
            echo "3. All endpoints will be automatically configured" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Available API Endpoints:**" >> $GITHUB_STEP_SUMMARY
            echo "- \`GET /api/v1/health\` - Health check for all services" >> $GITHUB_STEP_SUMMARY
            echo "- \`GET /api/v1/status\` - Detailed system status with queue metrics" >> $GITHUB_STEP_SUMMARY
            echo "- \`GET /api/v1/config/queue\` - Get queue configuration" >> $GITHUB_STEP_SUMMARY
            echo "- \`PUT /api/v1/config/queue\` - Update queue configuration" >> $GITHUB_STEP_SUMMARY
            echo "- \`POST /api/v1/data\` - Get random data (TRNG/Fortuna, multiple formats)" >> $GITHUB_STEP_SUMMARY
            echo "- \`GET /metrics\` - Prometheus metrics endpoint" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "> üì• **Download**: Find the \`swagger-docs\` artifact in the **Artifacts** section below." >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Warning**: Swagger documentation not found in artifacts." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "This may indicate:" >> $GITHUB_STEP_SUMMARY
            echo "- API build failed before Swagger generation" >> $GITHUB_STEP_SUMMARY
            echo "- Swagger artifact upload failed" >> $GITHUB_STEP_SUMMARY
            echo "- Check the build logs for errors" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üê≥ Container Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "Container images have been pushed to GitHub Container Registry:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# Pull individual images" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/lokey-controller:${GITHUB_REF_NAME}" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/lokey-api:${GITHUB_REF_NAME}" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ${{ env.REGISTRY }}/${{ github.repository_owner }}/lokey-fortuna:${GITHUB_REF_NAME}" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Service | Image Tag | Platform | Notes |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|-----------|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| lokey-controller | \`${GITHUB_REF_NAME}\` | linux/arm64 | I2C hardware support |" >> $GITHUB_STEP_SUMMARY
            echo "| lokey-api | \`${GITHUB_REF_NAME}\` | linux/arm64 | Includes Swagger UI |" >> $GITHUB_STEP_SUMMARY
            echo "| lokey-fortuna | \`${GITHUB_REF_NAME}\` | linux/arm64 | Stateless CSPRNG |" >> $GITHUB_STEP_SUMMARY
          else
            echo "üîÑ Pull request build - images not pushed to registry." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## ‚ÑπÔ∏è Build Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Number**: ${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ID**: ${{ github.run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch/Tag**: \`${GITHUB_REF_NAME}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Go Version**: ${{ env.GO_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Architecture**: ARM64 (aarch64)" >> $GITHUB_STEP_SUMMARY
          echo "- **CGO**: Enabled (for I2C and BoltDB support)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$BINARY_STATUS" == "success" ] && [ "$CONTAINER_STATUS" == "success" ]; then
            echo "### ‚úÖ All builds completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ‚ùå Some builds failed - check logs above" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi