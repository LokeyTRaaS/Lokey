name: Build Multi-Architecture Binaries and Containers

on:
  push:
    branches:
      - main
      - prerelease/**
    tags:
      - 'v*'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  GO_VERSION: '1.24'
  PROJECT_URL: https://lokey.cloud
  LICENSE: MIT

jobs:
  # Build native binaries for multiple architectures in parallel
  build-binaries:
    name: Build ${{ matrix.service }} Binary (${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [controller, api, fortuna]
        arch: [amd64, arm64, armv7]
        include:
          # AMD64 configuration
          - arch: amd64
            goarch: amd64
            cc: gcc

          # ARM64 configuration
          - arch: arm64
            goarch: arm64
            cc: aarch64-linux-gnu-gcc

          # ARMv7 configuration
          - arch: armv7
            goarch: arm
            goarm: 7
            cc: arm-linux-gnueabihf-gcc

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true
          cache-dependency-path: |
            go.sum
            cmd/${{ matrix.service }}/go.sum

      - name: Install cross-compilation tools
        run: |
          sudo apt-get update -qq
          if [ "${{ matrix.arch }}" = "arm64" ]; then
            sudo apt-get install -y gcc-aarch64-linux-gnu
          elif [ "${{ matrix.arch }}" = "armv7" ]; then
            sudo apt-get install -y gcc-arm-linux-gnueabihf
          fi

      # Install Swag for API service only
      - name: Install Swag for API service
        if: matrix.service == 'api' && matrix.arch == 'amd64'
        run: go install github.com/swaggo/swag/cmd/swag@latest

      # Generate Swagger docs once (for API service, any arch will do)
      - name: Generate Swagger documentation
        if: matrix.service == 'api' && matrix.arch == 'amd64'
        run: |
          echo "=== Generating Swagger documentation ==="
          swag init --parseDependency --parseInternal \
            --generalInfo main.go \
            --dir ./cmd/api/,./pkg/api \
            --output ./pkg/api/docs
          
          echo ""
          echo "=== Generated Swagger files ==="
          ls -lah ./pkg/api/docs/

      - name: Download dependencies
        run: |
          go mod download
          cd cmd/${{ matrix.service }} && go mod download

      - name: Build binary for ${{ matrix.arch }}
        env:
          CGO_ENABLED: 1
          GOOS: linux
          GOARCH: ${{ matrix.goarch }}
          GOARM: ${{ matrix.goarm }}
          CC: ${{ matrix.cc }}
        run: |
          mkdir -p build
          cd cmd/${{ matrix.service }}
          go build -v -x -trimpath -ldflags="-s -w" -o ../../build/lokey-${{ matrix.service }}-${{ matrix.arch }}

      - name: Verify binary
        run: |
          echo "=== Binary verification ==="
          file build/lokey-${{ matrix.service }}-${{ matrix.arch }}
          ls -lh build/lokey-${{ matrix.service }}-${{ matrix.arch }}

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: lokey-${{ matrix.service }}-${{ matrix.arch }}
          path: build/lokey-${{ matrix.service }}-${{ matrix.arch }}
          retention-days: 30
          compression-level: 9

      # Upload Swagger docs as artifact (API service, once)
      - name: Upload Swagger documentation
        if: matrix.service == 'api' && matrix.arch == 'amd64'
        uses: actions/upload-artifact@v4
        with:
          name: swagger-docs
          path: pkg/api/docs/
          retention-days: 30
          compression-level: 6

  # Build Docker images for multiple architectures
  build-containers:
    name: Build ${{ matrix.service }} Container (${{ matrix.arch }})
    runs-on: ubuntu-latest
    needs: build-binaries
    permissions:
      contents: read
      packages: write
    strategy:
      fail-fast: false
      matrix:
        service: [ controller, api, fortuna ]
        arch: [ amd64, arm64, armv7 ]
        include:
          # AMD64 platform mapping
          - arch: amd64
            platform: linux/amd64

          # ARM64 platform mapping
          - arch: arm64
            platform: linux/arm64

          # ARMv7 platform mapping
          - arch: armv7
            platform: linux/arm/v7

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create build directory
        run: mkdir -p build

      - name: Download binary artifact for ${{ matrix.arch }}
        uses: actions/download-artifact@v4
        with:
          name: lokey-${{ matrix.service }}-${{ matrix.arch }}
          path: ./build

      # Download Swagger docs for API service
      - name: Download Swagger documentation
        if: matrix.service == 'api'
        uses: actions/download-artifact@v4
        with:
          name: swagger-docs
          path: ./pkg/api/docs

      - name: Verify artifacts and prepare for build
        run: |
          echo "=== Binary verification ==="
          ls -la ./build/

          # The artifact contains the binary with arch suffix
          BINARY_WITH_ARCH="./build/lokey-${{ matrix.service }}-${{ matrix.arch }}"
          BINARY_STANDARD="./build/lokey-${{ matrix.service }}"

          if [ -f "$BINARY_WITH_ARCH" ]; then
            echo "Found: $BINARY_WITH_ARCH"
            file "$BINARY_WITH_ARCH"
            chmod +x "$BINARY_WITH_ARCH"

            # Create a standardized binary name for Docker (removes arch suffix)
            cp "$BINARY_WITH_ARCH" "$BINARY_STANDARD"
            echo "Created standardized binary: $BINARY_STANDARD"
            ls -lh "$BINARY_STANDARD"
          
            # Verify the file is readable and in the correct location
            echo ""
            echo "=== Final verification before Docker build ==="
            pwd
            ls -la build/
            file "build/lokey-${{ matrix.service }}"
          else
            echo "ERROR: Binary not found at $BINARY_WITH_ARCH"
            echo "Contents of ./build/:"
            ls -la ./build/
            exit 1
          fi

          # Verify Swagger docs for API service
          if [ "${{ matrix.service }}" == "api" ]; then
            echo ""
            echo "=== Swagger documentation verification ==="
            if [ -d "./pkg/api/docs" ]; then
              ls -la ./pkg/api/docs/
              [ -f "./pkg/api/docs/swagger.json" ] && echo "✓ swagger.json found"
              [ -f "./pkg/api/docs/swagger.yaml" ] && echo "✓ swagger.yaml found"
            else
              echo "⚠ Swagger docs directory not found"
            fi
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.service }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.arch }}
            type=ref,event=pr,suffix=-${{ matrix.arch }}
            type=semver,pattern={{version}},suffix=-${{ matrix.arch }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.arch }}
            type=sha,prefix=sha-,suffix=-${{ matrix.arch }}
            type=raw,value=latest-${{ matrix.arch }},enable={{is_default_branch}}
          labels: |
            org.opencontainers.image.title=LoKey ${{ matrix.service }}
            org.opencontainers.image.description=${{ matrix.service == 'controller' && 'ATECC608A hardware TRNG controller service' || matrix.service == 'api' && 'Main REST API service with BoltDB storage and queue management' || 'Fortuna CSPRNG amplifier service for high-throughput random number generation' }}
            org.opencontainers.image.url=${{ env.PROJECT_URL }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.licenses=${{ env.LICENSE }}
            org.opencontainers.image.vendor=LoKey TRaaS
          flavor: |
            latest=false

      - name: Build and push Docker image for ${{ matrix.platform }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./cmd/${{ matrix.service }}/Dockerfile.action
          platforms: ${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=${{ matrix.service }}-${{ matrix.arch }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}-${{ matrix.arch }}
          provenance: false
          sbom: false

  # Create release with all artifacts
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-binaries, build-containers]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create checksums
        run: |
          cd artifacts
          
          # Create checksums for each architecture
          for arch in amd64 arm64 armv7; do
            echo "Creating checksums for ${arch}"
            for service in controller api fortuna; do
              if [ -d "lokey-${service}-${arch}" ]; then
                cd "lokey-${service}-${arch}"
                sha256sum * > checksums-${arch}.txt
                cd ..
              fi
            done
          done
          
          # Create combined checksum file for all binaries
          find . -name "lokey-*" -type f -exec sha256sum {} \; > ../all-checksums.txt
          
          # Create checksum for swagger docs
          if [ -d "swagger-docs" ]; then
            cd swagger-docs
            sha256sum * > ../swagger-checksums.txt
            cd ..
          fi

      - name: Create release archives
        run: |
          mkdir -p releases
          cd artifacts
          
          # Create architecture-specific archives for each service
          for service in controller api fortuna; do
            for arch in amd64 arm64 armv7; do
              if [ -d "lokey-${service}-${arch}" ]; then
                tar -czf ../releases/lokey-${service}-${arch}.tar.gz \
                  -C lokey-${service}-${arch} .
              fi
            done
          done
          
          # Create combined archive with all binaries (all architectures)
          mkdir -p combined
          find . -name "lokey-*" -type f -exec cp {} combined/ \;
          tar -czf ../releases/lokey-all-binaries.tar.gz -C combined .
          
          # Create per-architecture combined archives
          for arch in amd64 arm64 armv7; do
            mkdir -p combined-${arch}
            for service in controller api fortuna; do
              if [ -f "lokey-${service}-${arch}/lokey-${service}-${arch}" ]; then
                cp "lokey-${service}-${arch}/lokey-${service}-${arch}" combined-${arch}/
              fi
            done
            if [ -d "combined-${arch}" ] && [ "$(ls -A combined-${arch})" ]; then
              tar -czf ../releases/lokey-all-services-${arch}.tar.gz -C combined-${arch} .
            fi
          done
          
          # Create swagger docs archive
          if [ -d "swagger-docs" ]; then
            tar -czf ../releases/swagger-docs.tar.gz -C swagger-docs .
          fi

      - name: Generate release notes
        run: |
          VERSION="${GITHUB_REF#refs/tags/}"
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          
          cat << 'EOF' > release_notes.md
          ## 🚀 LoKey ${VERSION} - Multi-Architecture Release

          ### 📦 What's Included
          - **Controller service** - ATECC608A hardware TRNG interface
          - **API service** - Main REST API with BoltDB storage
          - **Fortuna service** - Cryptographic RNG amplifier
          - **OpenAPI/Swagger** documentation
          - **Multi-arch Docker images** (AMD64, ARM64, ARMv7)

          ### 🏗️ Supported Architectures
          - **AMD64** (x86_64) - Desktop, laptop, cloud servers
          - **ARM64** (aarch64) - Raspberry Pi 4/5, Apple Silicon, cloud ARM
          - **ARMv7** (armhf) - Raspberry Pi 2/3, older ARM devices

          ### 🐳 Docker Images

          **Pull architecture-specific images:**
          ```bash
          # AMD64 (x86_64)
          docker pull ghcr.io/${REPO_LOWER}/controller:${VERSION}-amd64
          docker pull ghcr.io/${REPO_LOWER}/api:${VERSION}-amd64
          docker pull ghcr.io/${REPO_LOWER}/fortuna:${VERSION}-amd64

          # ARM64 (aarch64) - Raspberry Pi 4/5
          docker pull ghcr.io/${REPO_LOWER}/controller:${VERSION}-arm64
          docker pull ghcr.io/${REPO_LOWER}/api:${VERSION}-arm64
          docker pull ghcr.io/${REPO_LOWER}/fortuna:${VERSION}-arm64

          # ARMv7 (armhf) - Raspberry Pi 2/3
          docker pull ghcr.io/${REPO_LOWER}/controller:${VERSION}-armv7
          docker pull ghcr.io/${REPO_LOWER}/api:${VERSION}-armv7
          docker pull ghcr.io/${REPO_LOWER}/fortuna:${VERSION}-armv7
          ```

          ### 📥 Download Binaries

          **All architectures in one archive:**
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-all-binaries.tar.gz
          tar -xzf lokey-all-binaries.tar.gz
          ```

          **Architecture-specific complete sets:**
          ```bash
          # AMD64
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-all-services-amd64.tar.gz
          
          # ARM64
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-all-services-arm64.tar.gz
          
          # ARMv7
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-all-services-armv7.tar.gz
          ```

          **Individual service binaries:**
          ```bash
          # Controller (choose your architecture)
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-controller-amd64.tar.gz
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-controller-arm64.tar.gz
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-controller-armv7.tar.gz
          
          # API (choose your architecture)
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-api-amd64.tar.gz
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-api-arm64.tar.gz
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-api-armv7.tar.gz
          
          # Fortuna (choose your architecture)
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-fortuna-amd64.tar.gz
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-fortuna-arm64.tar.gz
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-fortuna-armv7.tar.gz
          ```

          ### 📚 API Documentation

          **Download OpenAPI/Swagger specification:**
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/swagger-docs.tar.gz
          tar -xzf swagger-docs.tar.gz
          ```

          **View live documentation:**
          ```
          http://your-api-host:8080/swagger/index.html
          ```

          ### 🥧 Raspberry Pi Quick Start

          **Raspberry Pi 4/5 (ARM64):**
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-all-services-arm64.tar.gz
          tar -xzf lokey-all-services-arm64.tar.gz
          chmod +x lokey-*-arm64
          sudo ./lokey-controller-arm64
          ```

          **Raspberry Pi 2/3 (ARMv7):**
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/lokey-all-services-armv7.tar.gz
          tar -xzf lokey-all-services-armv7.tar.gz
          chmod +x lokey-*-armv7
          sudo ./lokey-controller-armv7
          ```

          ### 🔐 Verify Downloads
          ```bash
          # Download checksums
          wget https://github.com/${{ github.repository }}/releases/download/${VERSION}/all-checksums.txt
          
          # Verify
          sha256sum -c all-checksums.txt
          ```

          ### 📖 Documentation
          - [Hardware Setup](https://github.com/${{ github.repository }}/blob/main/device/HowToSetup.md)
          - [API Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [Docker Compose Setup](https://github.com/${{ github.repository }}/blob/main/docker-compose.yaml)
          - [Project Website](https://lokey.cloud)

          ### 🔧 System Requirements
          - **OS**: Linux (any architecture listed above)
          - **Hardware**: 
            - Desktop/Laptop (AMD64)
            - Raspberry Pi 2/3 (ARMv7)
            - Raspberry Pi 4/5 (ARM64)
            - Cloud ARM instances (ARM64)
          - **Optional**: ATECC608A chip for hardware TRNG

          ---
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/...
          EOF
          
          # Substitute variables
          sed -i "s/\${VERSION}/${VERSION}/g" release_notes.md
          sed -i "s/\${REPO_LOWER}/${REPO_LOWER}/g" release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            releases/*.tar.gz
            all-checksums.txt
            swagger-checksums.txt
          body_path: release_notes.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Summary job for status checks
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build-binaries, build-containers]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Generate comprehensive summary
        run: |
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          BRANCH_TAG=$(echo "${GITHUB_REF_NAME}" | sed 's/\//-/g')
          
          echo "# 🚀 Multi-Architecture Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📊 Build Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Service | AMD64 Binary | ARM64 Binary | ARMv7 Binary | Container | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|--------------|--------------|--------------|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          BINARY_STATUS="${{ needs.build-binaries.result }}"
          CONTAINER_STATUS="${{ needs.build-containers.result }}"
          
          if [ "$BINARY_STATUS" == "success" ] && [ "$CONTAINER_STATUS" == "success" ]; then
            OVERALL="✅ All Passed"
          else
            OVERALL="❌ Failed"
          fi
          
          for service in controller api fortuna; do
            AMD64_ICON="❌"
            ARM64_ICON="❌"
            ARMV7_ICON="❌"
          
            [ -f "./artifacts/lokey-${service}-amd64/lokey-${service}-amd64" ] && AMD64_ICON="✅"
            [ -f "./artifacts/lokey-${service}-arm64/lokey-${service}-arm64" ] && ARM64_ICON="✅"
            [ -f "./artifacts/lokey-${service}-armv7/lokey-${service}-armv7" ] && ARMV7_ICON="✅"
          
            CONTAINER_ICON="✅"
            [ "$CONTAINER_STATUS" != "success" ] && CONTAINER_ICON="❌"
          
            echo "| lokey-${service} | ${AMD64_ICON} | ${ARM64_ICON} | ${ARMV7_ICON} | ${CONTAINER_ICON} | ${OVERALL} |" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📦 Binary Artifacts by Architecture" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          for arch in amd64 arm64 armv7; do
            echo "### ${arch^^}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Service | Binary Name | Size | SHA256 |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|-------------|------|--------|" >> $GITHUB_STEP_SUMMARY
          
            for service in controller api fortuna; do
              ARTIFACT_PATH="./artifacts/lokey-${service}-${arch}/lokey-${service}-${arch}"
              if [ -f "$ARTIFACT_PATH" ]; then
                SIZE=$(ls -lh "$ARTIFACT_PATH" | awk '{print $5}')
                SHA256=$(sha256sum "$ARTIFACT_PATH" | awk '{print substr($1,1,16)"..."}')
                echo "| lokey-${service} | \`lokey-${service}-${arch}\` | $SIZE | \`$SHA256\` |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| lokey-${service} | \`lokey-${service}-${arch}\` | N/A | N/A |" >> $GITHUB_STEP_SUMMARY
              fi
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          done
          
          echo "> 💡 **Tip**: All binaries are available in the **Artifacts** section for 30 days." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 📚 API Documentation (OpenAPI/Swagger)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "./artifacts/swagger-docs" ]; then
            echo "✅ OpenAPI specification available for download." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
            echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          
            [ -f "./artifacts/swagger-docs/swagger.json" ] && \
              echo "| \`swagger.json\` | $(ls -lh ./artifacts/swagger-docs/swagger.json | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY
            [ -f "./artifacts/swagger-docs/swagger.yaml" ] && \
              echo "| \`swagger.yaml\` | $(ls -lh ./artifacts/swagger-docs/swagger.yaml | awk '{print $5}') |" >> $GITHUB_STEP_SUMMARY
          
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Access at:** \`http://your-api:8080/swagger/index.html\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🐳 Container Images" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ github.event_name }}" != "pull_request" ]; then
            echo "Multi-architecture images available:" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Service | AMD64 | ARM64 | ARMv7 |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|-------|-------|-------|" >> $GITHUB_STEP_SUMMARY
          
            for service in controller api fortuna; do
              echo "| ${service} | \`${BRANCH_TAG}-amd64\` | \`${BRANCH_TAG}-arm64\` | \`${BRANCH_TAG}-armv7\` |" >> $GITHUB_STEP_SUMMARY
            done
          
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Pull commands:**" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
            echo "# AMD64" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ghcr.io/${REPO_LOWER}/controller:${BRANCH_TAG}-amd64" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# ARM64 (Raspberry Pi 4/5)" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ghcr.io/${REPO_LOWER}/controller:${BRANCH_TAG}-arm64" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "# ARMv7 (Raspberry Pi 2/3)" >> $GITHUB_STEP_SUMMARY
            echo "docker pull ghcr.io/${REPO_LOWER}/controller:${BRANCH_TAG}-armv7" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "🔄 Pull request build - images not pushed." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## ℹ️ Build Information" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run**: #${{ github.run_number }} (ID: ${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`${GITHUB_REF_NAME}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Go**: ${{ env.GO_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Architectures**: AMD64, ARM64, ARMv7" >> $GITHUB_STEP_SUMMARY
          echo "- **CGO**: Enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Project**: [lokey.cloud](https://lokey.cloud)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "$BINARY_STATUS" == "success" ] && [ "$CONTAINER_STATUS" == "success" ]; then
            echo "### ✅ All builds completed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Some builds failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi