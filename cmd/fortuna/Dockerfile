FROM golang:1.24-alpine AS builder

WORKDIR /app

# Install build dependencies for CGO and I2C
RUN apk add --no-cache gcc musl-dev linux-headers

# Copy the module files first to leverage Docker cache
COPY go.mod go.sum ./
COPY cmd/fortuna/go.mod cmd/fortuna/go.sum* ./cmd/fortuna/

# Download dependencies
RUN go mod download && cd cmd/fortuna && go mod download

# Copy the rest of the source code
COPY . .

# Build the application with CGO enabled
# Using -trimpath for smaller binaries and more reproducible builds
RUN cd cmd/fortuna && CGO_ENABLED=1 GOOS=linux go build -x -trimpath -o /app/fortuna

# Create a smaller runtime image
FROM alpine:latest

# Add only the necessary runtime dependencies
# ca-certificates for HTTPS, libc6-compat for dynamic linking
RUN apk --no-cache add ca-certificates libc6-compat

WORKDIR /app

# Copy the binary from the builder stage
COPY --from=builder /app/fortuna /app/fortuna

# Set environment variables
ENV PORT=8082 \
    CONTROLLER_URL="http://controller:8081"

# Expose the port
EXPOSE 8082

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 -O /dev/null http://localhost:8082/health || exit 1

# Run the application
CMD ["/app/fortuna"]
